import yfinance as yf
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt
from datetime import timedelta
from pmdarima import auto_arima
import streamlit as st

# –õ—ñ–≤–∞ –±—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
st.sidebar.title('üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
period_options = {
    '1 —Ä—ñ–∫': '1y',
    '2 —Ä–æ–∫–∏': '2y',
    '5 —Ä–æ–∫—ñ–≤': '5y'
}
selected_period_label = st.sidebar.radio('–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:', list(period_options.keys()))
selected_period = period_options[selected_period_label]
show_forecast = st.sidebar.checkbox('–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑', value=False)

# –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ‚Äî —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∞ —è–∫ –±–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å
with st.container():
    st.markdown(
        """
        <div style='
            background-color: #f0f2f6;
            padding: 15px 25px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        '>
            <h2 style='margin: 0; color: #336699;'>üìä ARIMA –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∞–∫—Ü—ñ–π</h2>
            <div style='flex: 1; text-align: right; font-size: 14px; color: #666;'>
                –û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—ó –Ω–∏–∂—á–µ ‚¨áÔ∏è
            </div>
        </div>
        """, unsafe_allow_html=True
    )

# –í–∏–±—ñ—Ä –∫–æ–º–ø–∞–Ω—ñ–π
company_options = {
    'Apple (AAPL)': 'AAPL',
    'Microsoft (MSFT)': 'MSFT',
    'Tesla (TSLA)': 'TSLA',
    'Amazon (AMZN)': 'AMZN',
    'Google (GOOGL)': 'GOOGL',
    'Meta (META)': 'META',
    'NVIDIA (NVDA)': 'NVDA',
    'Netflix (NFLX)': 'NFLX'
}
selected = st.multiselect(
    '–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–ø–∞–Ω—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:',
    options=list(company_options.keys())
)

forecast_figs = []
volume_latest = {}

if selected:
    symbols = [company_options[name] for name in selected]
    close_prices = pd.DataFrame()

    for symbol in symbols:
        stock_data = yf.download(symbol, period=selected_period)
        st.subheader(f'üìå –î–∞–Ω—ñ –¥–ª—è {symbol}')
        if not stock_data.empty:
            available_columns = stock_data.columns.tolist()
            columns_to_show = st.multiselect(
                f'–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è {symbol}:',
                options=available_columns,
                default=available_columns
            )
            st.write('üìä –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ', stock_data[columns_to_show].head())
            close_prices[symbol] = stock_data['Close']

            last_volume = stock_data['Volume'].dropna().iloc[-1]
            volume_latest[symbol] = last_volume

            df = stock_data[['Close']].copy().dropna()
            df.index = pd.to_datetime(df.index)
            last_2_months = df.last('60D')

            try:
                auto_model = auto_arima(
                    df['Close'],
                    seasonal=False,
                    stepwise=True,
                    suppress_warnings=True,
                    error_action='ignore',
                    max_p=3, max_q=3,
                    start_p=1, start_q=1,
                    d=None
                )
                order = auto_model.order
                if order == (0, 1, 0):
                    order = (1, 1, 1)

                model = ARIMA(df['Close'], order=order)
                model_fit = model.fit()
                forecast = model_fit.forecast(steps=7)
                future_dates = [df.index[-1] + timedelta(days=i + 1) for i in range(7)]

                fig, ax = plt.subplots(figsize=(8, 4))
                ax.plot(last_2_months.index, last_2_months['Close'], label='–û—Å—Ç–∞–Ω–Ω—ñ 2 –º—ñ—Å—è—Ü—ñ')
                ax.plot(future_dates, forecast, label='–ü—Ä–æ–≥–Ω–æ–∑ (7 –¥–Ω—ñ–≤)', color='red')
                ax.set_title(f'–ü—Ä–æ–≥–Ω–æ–∑ —Ü—ñ–Ω–∏ –¥–ª—è {symbol}')
                ax.set_xlabel('–î–∞—Ç–∞')
                ax.set_ylabel('–¶—ñ–Ω–∞')
                ax.legend()
                plt.xticks(rotation=45)

                forecast_figs.append((symbol, fig, forecast, future_dates))

            except Exception as e:
                st.error(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –º–æ–¥–µ–ª—ñ ARIMA –¥–ª—è {symbol}: {e}')
        else:
            st.error(f'‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {symbol}.')

    if not close_prices.empty:
        st.subheader("üìà –î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω")
        st.line_chart(close_prices)

        last_close_prices = close_prices.iloc[-1]
        fig_pie, ax_pie = plt.subplots()
        ax_pie.pie(
            last_close_prices,
            labels=last_close_prices.index,
            autopct='%1.1f%%',
            startangle=90
        )
        ax_pie.set_title('–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Ü—ñ–Ω –∞–∫—Ü—ñ–π –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å')
        st.pyplot(fig_pie)

        if show_forecast:
            st.subheader('üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏')
            for symbol, fig, forecast, future_dates in forecast_figs:
                st.pyplot(fig)
                forecast_df = pd.DataFrame({
                    '–î–∞—Ç–∞': future_dates,
                    '–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞': forecast.values
                })
                forecast_df.set_index('–î–∞—Ç–∞', inplace=True)
                st.write(f'üìÑ –¢–∞–±–ª–∏—Ü—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è {symbol}:')
                st.dataframe(forecast_df)
